        -:    0:Source:vectors.adb
        -:    0:Graph:vectors.gcno
        -:    0:Data:vectors.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:with Ada.Text_IO;  
        -:    2:
        1:    3:package body Vectors is
        -:    4:   package Float_IO is new Ada.Text_IO.Float_IO (Float); 
        -:    5:   
        3:    6:   procedure Vector_Put (X : Float_Vector) is
        -:    7:   begin
        3:    8:      Ada.Text_IO.Put ("(");
        9:    9:      for I in X'Range loop
        6:   10:         Float_IO.Put (X (I), Aft => 1, Exp => 0);
        6:   11:         if I /= X'Last then
        3:   12:            Ada.Text_IO.Put (", ");
        -:   13:         end if;
        3:   14:      end loop;
        3:   15:      Ada.Text_IO.Put (")");
        3:   16:   end Vector_Put;
        -:   17: 
        -:   18:   -- cross product
        8:   19:   function "*" (Left, Right : Float_Vector) return Float_Vector is
        -:   20:   begin
        8:   21:      if Left'Length /= Right'Length then
        2:   22:         raise Constraint_Error with
        -:   23:	   "vectors of different size in dot product";
        -:   24:      end if;
        6:   25:      if Left'Length /= 3 then
        1:   26:         raise Constraint_Error with 
        -:   27:	   "dot product only implemented for R**3";
        -:   28:      end if;
       20:   29:      return Float_Vector'(Left (Left'First + 1) * Right (Right'First + 2) -
       10:   30:                             Left (Left'First + 2) * Right (Right'First + 1),
       15:   31:                           Left (Left'First + 2) * Right (Right'First) -
       10:   32:                             Left (Left'First) * Right (Right'First + 2),
       15:   33:                           Left (Left'First) * Right (Right'First + 1) -
       10:   34:                             Left (Left'First + 1) * Right (Right'First));
        -:   35:   end "*";
        -:   36:   
        -:   37:   -- scalar product
        5:   38:   function "*" (Left, Right : Float_Vector) return Float is
        5:   39:      Result : Float := 0.0;
        -:   40:      I, J : Positive;
        -:   41:   begin
        5:   42:      if Left'Length /= Right'Length then
        1:   43:         raise Constraint_Error with 
        -:   44:	   "vectors of different size in scalar product";
        -:   45:      end if;
        4:   46:      I := Left'First; J := Right'First;
       16:   47:      while I <= Left'Last and then J <= Right'Last loop
       12:   48:         Result := Result + Left (I) * Right (J);
       12:   49:         I := I + 1; J := J + 1;
       12:   50:      end loop;
        4:   51:      return Result;
        -:   52:   end "*";
        -:   53: 
        -:   54:   -- stretching
       14:   55:   function "*" (Left : Float_Vector; Right : Float) return Float_Vector is
        7:   56:      Result : Float_Vector (Left'Range);
        -:   57:   begin
       28:   58:      for I in Left'Range loop
       21:   59:         Result (I) := Left (I) * Right;
       14:   60:      end loop;
        7:   61:      return Result;
        -:   62:   end "*";
        1:   63:end Vectors;
        -:   64:   
