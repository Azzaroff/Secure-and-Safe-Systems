           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 01-FEB-2012 19:07:35.98

                    procedure Faculty.calculate_faculty




For path(s) from start to run-time check associated with statement of line 6:

procedure_calculate_faculty_1.
H1:    n >= faculty_positive__first .
H2:    n <= faculty_positive__last .
H3:    n >= faculty_positive__first .
H4:    n <= faculty_positive__last .
        ->
C1:    1 >= positive__first .
C2:    1 <= positive__last .
 

For path(s) from start to assertion of line 7:

procedure_calculate_faculty_2.
H1:    n >= faculty_positive__first .
H2:    n <= faculty_positive__last .
H3:    n >= faculty_positive__first .
H4:    n <= faculty_positive__last .
H5:    1 >= positive__first .
H6:    1 <= positive__last .
        ->
C1:    1 >= 1 .
C2:    1 <= n .
C3:    n <= faculty_positive__last .
C4:    n >= faculty_positive__first .
C5:    1 * 1 <= positive__last .
C6:    1 * 1 >= positive__first .
C7:    1 >= 1 .
C8:    1 = element(fac_arr, [1]) .
C9:    n >= faculty_positive__first .
C10:   n <= faculty_positive__last .
C11:   n >= faculty_positive__first .
C12:   n <= faculty_positive__last .
 

For path(s) from assertion of line 7 to assertion of line 10:

procedure_calculate_faculty_3.
H1:    i >= 1 .
H2:    i <= n .
H3:    n <= faculty_positive__last .
H4:    n >= faculty_positive__first .
H5:    fac * i <= positive__last .
H6:    fac * i >= positive__first .
H7:    fac >= 1 .
H8:    fac = element(fac_arr, [i]) .
H9:    n >= faculty_positive__first .
H10:   n <= faculty_positive__last .
H11:   n >= faculty_positive__first .
H12:   n <= faculty_positive__last .
H13:   i >= faculty_positive__first .
H14:   i <= faculty_positive__last .
H15:   i < n .
        ->
C1:    i < n .
C2:    n <= faculty_positive__last .
C3:    n >= faculty_positive__first .
C4:    fac * i <= positive__last .
C5:    fac * i >= positive__first .
C6:    fac = element(fac_arr, [i]) .
C7:    n >= faculty_positive__first .
C8:    n <= faculty_positive__last .
C9:    n >= faculty_positive__first .
C10:   n <= faculty_positive__last .
 

For path(s) from assertion of line 10 to assertion of line 10:

procedure_calculate_faculty_4.
H1:    i < n .
H2:    n <= faculty_positive__last .
H3:    n >= faculty_positive__first .
H4:    fac * i <= positive__last .
H5:    fac * i >= positive__first .
H6:    fac = element(fac_arr, [i]) .
H7:    n >= faculty_positive__first .
H8:    n <= faculty_positive__last .
H9:    n >= faculty_positive__first .
H10:   n <= faculty_positive__last .
H11:   fac >= positive__first .
H12:   fac <= positive__last .
H13:   i >= faculty_positive__first .
H14:   i <= faculty_positive__last .
H15:   fac * i >= positive__first .
H16:   fac * i <= positive__last .
H17:   i >= faculty_positive__first .
H18:   i <= faculty_positive__last .
H19:   i + 1 >= faculty_positive__first .
H20:   i + 1 <= faculty_positive__last .
H21:   i + 1 >= faculty_positive__first .
H22:   i + 1 <= faculty_positive__last .
H23:   i + 1 < n .
        ->
C1:    i + 1 < n .
C2:    n <= faculty_positive__last .
C3:    n >= faculty_positive__first .
C4:    fac * i * (i + 1) <= positive__last .
C5:    fac * i * (i + 1) >= positive__first .
C6:    fac * i = element(fac_arr, [i + 1]) .
C7:    n >= faculty_positive__first .
C8:    n <= faculty_positive__last .
C9:    n >= faculty_positive__first .
C10:   n <= faculty_positive__last .
 

For path(s) from assertion of line 10 to run-time check associated with statement of line 11:

procedure_calculate_faculty_5.
H1:    i < n .
H2:    n <= faculty_positive__last .
H3:    n >= faculty_positive__first .
H4:    fac * i <= positive__last .
H5:    fac * i >= positive__first .
H6:    fac = element(fac_arr, [i]) .
H7:    n >= faculty_positive__first .
H8:    n <= faculty_positive__last .
H9:    n >= faculty_positive__first .
H10:   n <= faculty_positive__last .
H11:   fac >= positive__first .
H12:   fac <= positive__last .
H13:   i >= faculty_positive__first .
H14:   i <= faculty_positive__last .
        ->
C1:    fac * i >= positive__first .
C2:    fac * i <= positive__last .
 

For path(s) from assertion of line 10 to run-time check associated with statement of line 12:

procedure_calculate_faculty_6.
H1:    i < n .
H2:    n <= faculty_positive__last .
H3:    n >= faculty_positive__first .
H4:    fac * i <= positive__last .
H5:    fac * i >= positive__first .
H6:    fac = element(fac_arr, [i]) .
H7:    n >= faculty_positive__first .
H8:    n <= faculty_positive__last .
H9:    n >= faculty_positive__first .
H10:   n <= faculty_positive__last .
H11:   fac >= positive__first .
H12:   fac <= positive__last .
H13:   i >= faculty_positive__first .
H14:   i <= faculty_positive__last .
H15:   fac * i >= positive__first .
H16:   fac * i <= positive__last .
H17:   i >= faculty_positive__first .
H18:   i <= faculty_positive__last .
        ->
C1:    i + 1 >= faculty_positive__first .
C2:    i + 1 <= faculty_positive__last .
 

For path(s) from assertion of line 7 to assertion of line 14:

procedure_calculate_faculty_7.
H1:    i >= 1 .
H2:    i <= n .
H3:    n <= faculty_positive__last .
H4:    n >= faculty_positive__first .
H5:    fac * i <= positive__last .
H6:    fac * i >= positive__first .
H7:    fac >= 1 .
H8:    fac = element(fac_arr, [i]) .
H9:    n >= faculty_positive__first .
H10:   n <= faculty_positive__last .
H11:   n >= faculty_positive__first .
H12:   n <= faculty_positive__last .
H13:   i >= faculty_positive__first .
H14:   i <= faculty_positive__last .
H15:   not (i < n) .
        ->
C1:    fac = element(fac_arr, [i]) .
C2:    n >= faculty_positive__first .
C3:    n <= faculty_positive__last .
C4:    n >= faculty_positive__first .
C5:    n <= faculty_positive__last .
 

For path(s) from assertion of line 10 to assertion of line 14:

procedure_calculate_faculty_8.
H1:    i < n .
H2:    n <= faculty_positive__last .
H3:    n >= faculty_positive__first .
H4:    fac * i <= positive__last .
H5:    fac * i >= positive__first .
H6:    fac = element(fac_arr, [i]) .
H7:    n >= faculty_positive__first .
H8:    n <= faculty_positive__last .
H9:    n >= faculty_positive__first .
H10:   n <= faculty_positive__last .
H11:   fac >= positive__first .
H12:   fac <= positive__last .
H13:   i >= faculty_positive__first .
H14:   i <= faculty_positive__last .
H15:   fac * i >= positive__first .
H16:   fac * i <= positive__last .
H17:   i >= faculty_positive__first .
H18:   i <= faculty_positive__last .
H19:   i + 1 >= faculty_positive__first .
H20:   i + 1 <= faculty_positive__last .
H21:   i + 1 >= faculty_positive__first .
H22:   i + 1 <= faculty_positive__last .
H23:   not (i + 1 < n) .
        ->
C1:    fac * i = element(fac_arr, [i + 1]) .
C2:    n >= faculty_positive__first .
C3:    n <= faculty_positive__last .
C4:    n >= faculty_positive__first .
C5:    n <= faculty_positive__last .
 

For path(s) from assertion of line 14 to finish:

procedure_calculate_faculty_9.
*** true .          /* trivially true VC removed by Examiner */


