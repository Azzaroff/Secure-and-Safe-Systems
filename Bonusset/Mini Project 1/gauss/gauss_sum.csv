/* SAVED: 01-FEB-2012, at 16:34:07 */
'auto_done'('on').
'auto_newvc'('on').
'case_pointer'(0).
'command_logging'('on').
'csvfile_name'('gauss_sum.csv').
'current_vc'('procedure_gauss_sum_1', 1).
'current_vc_no'(3).
'display_subgoals_max'(10).
'display_var_free_only'('on').
'echo'('on').
'fdl_file_title'('procedure_gauss_sum').
'fdlfile_name'('gauss_sum.fdl').
'function'('round__', ['real'], 'integer').
'function_template'('round__'(A1), [A1], 'round__').
'hyp'(1, '<='('n', 46340)).
'hyp'(16, '>='('gauss_positive__base__last', 46340)).
'hyp'(15, '<='('gauss_positive__base__first', 1)).
'hyp'(14, '<='('positive__base__first', 1)).
'hyp'(13, '<='(1, 'positive__last')).
'hyp'(12, '<='('gauss_positive__base__first', 'gauss_positive__base__last')).
'hyp'(11, '>='('gauss_positive__size', 0)).
'hyp'(10, '>='('positive__base__last', 'positive__last')).
'hyp'(9, '<='('positive__base__first', 'positive__base__last')).
'hyp'(8, '>='('positive__size', 0)).
'hyp'(7, '>='('integer__base__last', 'integer__last')).
'hyp'(6, '<='('integer__base__first', 'integer__first')).
'hyp'(5, '<='('integer__base__first', 'integer__base__last')).
'hyp'(4, '<='('integer__first', 'integer__last')).
'hyp'(3, '>='('integer__size', 0)).
'hyp'(2, '>'('n', 0)).
'hyp'(17, '='('n', 46340)).
'hyp'(18, '='('integer__base__first', '-'(2147483648))).
'hyp'(19, '='('integer__base__last', 2147483647)).
'hyp'(20, '<='('n', 'positive__last')).
'hyp'(21, '='('div'('*'('n', '+'('n', 1)), 2), 1073720970)).
'hyp'(22, '='('positive__last', 2147483647)).
'indentation'(0).
'indentation_increment'(2).
'inverse_video'('[]').
'logfile_name'('gauss_sum.plg').
'newline_after_prompts'('off').
'normal_video'('[]').
'on_filename'('/home/azzaroff/.spark/bin//../lib/checker/rules/SPECIAL.RUL').
'prooflog_width'(0).
'record_consults'('on').
'ruleused_this_session'([
'/home/azzaroff/.spark/bin//../lib/checker/rules/GENINEQS.RUL', 'transitivity'(1)]).
'ruleused_this_session'([
'/home/azzaroff/.spark/bin//../lib/checker/rules/GENINEQS.RUL', 'transitivity'(29)]).
'ruleused_this_session'([
'/home/azzaroff/.spark/bin//../lib/checker/rules/NUMINEQS.RUL', 'inequals'(40)]).
'ruleused_this_session'(['/home/azzaroff/.spark/bin//../lib/checker/rules/SPECIAL.RUL', 
'eq'(1)]).
'ruleused_this_session'(['my_rules.rls', 'my_rules'(2)]).
'ruleused_this_session'(['my_rules.rls', 'my_rules'(3)]).
'ruleused_this_session'(['my_rules.rls', 'my_rules'(4)]).
'ruleused_this_session'(['my_rules.rls', 'my_rules'(6)]).
'saved_vc'(1, 'hyp'(1, '<='('n', 46340))).
'saved_vc'(1, 'hyp'(16, '>='('gauss_positive__base__last', 46340))).
'saved_vc'(1, 'hyp'(15, '<='('gauss_positive__base__first', 1))).
'saved_vc'(1, 'hyp'(14, '<='('positive__base__first', 1))).
'saved_vc'(1, 'hyp'(13, '<='(1, 'positive__last'))).
'saved_vc'(1, 'hyp'(12, '<='('gauss_positive__base__first', 'gauss_positive__base__last'))).
'saved_vc'(1, 'hyp'(11, '>='('gauss_positive__size', 0))).
'saved_vc'(1, 'hyp'(10, '>='('positive__base__last', 'positive__last'))).
'saved_vc'(1, 'hyp'(9, '<='('positive__base__first', 'positive__base__last'))).
'saved_vc'(1, 'hyp'(8, '>='('positive__size', 0))).
'saved_vc'(1, 'hyp'(7, '>='('integer__base__last', 'integer__last'))).
'saved_vc'(1, 'hyp'(6, '<='('integer__base__first', 'integer__first'))).
'saved_vc'(1, 'hyp'(5, '<='('integer__base__first', 'integer__base__last'))).
'saved_vc'(1, 'hyp'(4, '<='('integer__first', 'integer__last'))).
'saved_vc'(1, 'hyp'(3, '>='('integer__size', 0))).
'saved_vc'(1, 'hyp'(2, '>'('n', 0))).
'saved_vc'(1, 'hyp'(17, '='('n', 46340))).
'saved_vc'(1, 'hyp'(18, '='('integer__base__first', '-'(2147483648)))).
'saved_vc'(1, 'hyp'(19, '='('integer__base__last', 2147483647))).
'saved_vc'(1, 'hyp'(20, '<='('n', 'positive__last'))).
'saved_vc'(1, 'conc'(3, '<='('*'('n', '+'('n', 1)), 'integer__base__last'))).
'saved_vc'(1, 'conc'(2, '>='('*'('n', '+'('n', 1)), 'integer__base__first'))).
'saved_vc'(1, 'conc'(1, '<='('div'('*'('n', '+'('n', 1)), 2), 'positive__last'))).
'show_vc_changes'('on').
'simplify_in_infer'('on').
'simplify_during_load'('on').
'spark_enabled'.
'step_number'(24).
'typechecking'('on').
'typechecking_during_load'('on').
'use_subst_rules_for_equality'('on').
'used_ident'('round__', 'function').
'used_ident'('gauss_positive__base__first', 'var_const').
'used_ident'('gauss_positive__base__last', 'var_const').
'used_ident'('positive__base__first', 'var_const').
'used_ident'('positive__base__last', 'var_const').
'used_ident'('integer__base__first', 'var_const').
'used_ident'('integer__base__last', 'var_const').
'used_ident'('gauss_positive__first', 'var_const').
'used_ident'('gauss_positive__last', 'var_const').
'used_ident'('gauss_positive__size', 'var_const').
'used_ident'('positive__first', 'var_const').
'used_ident'('positive__last', 'var_const').
'used_ident'('positive__size', 'var_const').
'used_ident'('integer__first', 'var_const').
'used_ident'('integer__last', 'var_const').
'used_ident'('integer__size', 'var_const').
'used_ident'('n', 'var_const').
'user_rulefile'('integer__last', 'my_rules.rls').
'user_rulefile'('my_rules.rls', 'my_rules'(A1)).
'user_rulefile'('positive__last', 'my_rules.rls').
'user_rulefile'('integer__base__first', 'my_rules.rls').
'user_rulefile'('integer__base__last', 'my_rules.rls').
'user_rulefile'('integer__first', 'my_rules.rls').
'user_classification'('>='(A1, A2), 'my_rules.rls', 'my_rules'(A3), [':'(A1, 'ire'), ':'(A2, 
'ire')]).
'user_classification'('<='(A1, A2), 'my_rules.rls', 'my_rules'(A3), [':'(A1, 'ire'), ':'(A2, 
'ire')]).
'user_classification'(A1, 'my_rules.rls', 'my_rules'(A2), [':'(A1, 'any')]).
'var_const'('gauss_positive__base__first', 'integer', 'c').
'var_const'('gauss_positive__base__last', 'integer', 'c').
'var_const'('positive__base__first', 'integer', 'c').
'var_const'('positive__base__last', 'integer', 'c').
'var_const'('integer__base__first', 'integer', 'c').
'var_const'('integer__base__last', 'integer', 'c').
'var_const'('gauss_positive__first', 'integer', 'c').
'var_const'('gauss_positive__last', 'integer', 'c').
'var_const'('gauss_positive__size', 'integer', 'c').
'var_const'('positive__first', 'integer', 'c').
'var_const'('positive__last', 'integer', 'c').
'var_const'('positive__size', 'integer', 'c').
'var_const'('integer__first', 'integer', 'c').
'var_const'('integer__last', 'integer', 'c').
'var_const'('integer__size', 'integer', 'c').
'var_const'('n', 'integer', 'v').
'vcgfile_name'('gauss_sum.siv').
'vcs_to_prove'('[]').
